on:
  workflow_dispatch:

jobs:
  release:
    name: Release - ${{ matrix.platform.os_name }}
    strategy:
      matrix:
        platform:
          - os_name: Linux-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
            bin: patch_backup
            name: patch_backup-linux-x86_64-musl.tar.gz
            cross: false
            cargo_command: cargo

          - os_name: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: patch_backup.exe
            name: patch_backup-windows-amd64.zip
            cross: false
            cargo_command: cargo

          - os_name: macOS-x86_64
            os: macOS-latest
            target: x86_64-apple-darwin
            bin: patch_backup
            name: patch_backup-darwin-x86_64.tar.gz
            cross: false
            cargo_command: cargo

    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install toolchain if not cross-compiling
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}
        if: ${{ !matrix.platform.cross }}
      - name: Install musl-tools on Linux
        run: sudo apt-get update --yes && sudo apt-get install --yes musl-tools
        if: contains(matrix.platform.os, 'ubuntu') && !matrix.platform.cross
      - name: Build binary (*nix)
        shell: bash
        run: |
          ${{ matrix.platform.cargo_command }} build --locked --release --target ${{ matrix.platform.target }}
        if: ${{ !contains(matrix.platform.os, 'windows') }}
      - name: Build binary (Windows)
        # We have to use the platform's native shell. If we use bash on
        # Windows then OpenSSL complains that the Perl it finds doesn't use
        # the platform's native paths and refuses to build.
        shell: powershell
        run: |
          & ${{ matrix.platform.cargo_command }} build --locked --release --target ${{ matrix.platform.target }}
        if: contains(matrix.platform.os, 'windows')
      - name: Strip binary
        shell: bash
        run: |
          strip target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
        # strip doesn't work with cross-arch binaries on Linux or Windows.
        if: ${{ !(matrix.platform.cross || matrix.platform.target == 'aarch64-pc-windows-msvc') }}
      - name: Package as archive
        shell: bash
        run: |
          cd target/${{ matrix.platform.target }}/release
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            7z a ../../../${{ matrix.platform.name }} ${{ matrix.platform.bin }}
          else
            tar czvf ../../../${{ matrix.platform.name }} ${{ matrix.platform.bin }}
          fi
          cd -
      - name: Publish release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: patch_backup-${{ matrix.platform.os_name }}
          path: "patch_backup*"
      - name: generate the release tag (*nix)
        id: tag_nix
        run: |
          echo "release_tag=$(date +"%Y.%m.%d")" >> $GITHUB_OUTPUT
          echo "release_date=$(date +"%Y.%m.%d")" >> $GITHUB_OUTPUT
        if: ${{ matrix.platform.target != 'x86_64-pc-windows-msvc' }}
      - name: generate the release tag (windows)
        id: tag_win
        run: |
          $release_tag = Get-Date -Format "yyyy-MM-dd"
          echo release_tag=$release_tag >> $env:GITHUB_OUTPUT
        if: ${{ matrix.platform.target == 'x86_64-pc-windows-msvc' }}
      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          prerelease: true
          files: "patch_backup*"
          name: ${{ steps.tag_nix.outputs.release_tag || steps.tag_win.outputs.release_tag }} patch_backup
          tag_name: ${{ steps.tag_nix.outputs.release_tag || steps.tag_win.outputs.release_tag }}
